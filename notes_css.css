/*  Комментарий в CSS */
/* Не все свойства работают во всех браузерах! */


/* Указание в html на файл css:
templates\
    index.html
    style.css
*/
<htmL>
<head>
    <title>CCS in file</title>
    <link rel="stylesheet" href="style.css">
</head>
</html>

/* Можно писать сразху в файле .html: */
<html>
    <head>
    <style>
        body {
            background-color: lightblue;
        }
    </style>
    </head>
</html>


/* Стили тегов */
h1 {
    color: white;
    text-align: center;
}

p {
    font-family: Verdana;
    font-size: 20px;
}


/* Переиспользование */
/* Когда для одного и того же элемента есть несколько CSS-правил с одинаковыми свойствами, 
браузер использует понятия приоритетов и специфичности, чтобы выбрать значение свойства из нескольких возможных. 
Упрощённо, можно сказать что:
CSS-правила в значении атрибута style самые приоритетные,
за ними идёт селектор с id,
затем селектор с классом,
затем селектор с именем тега.
На самом деле, механизм определения приоритетов и специфичности более сложный... */
p {
    padding: 10px;
    background-color: #dff0d8;
  }
/* + */
  .truth {
    background-color: #aaddff;
  }
/* = */
  В итоге {
    padding: 10px;
    background-color: #dff0d8;  /* Не будет использован */
    background-color: #aaddff;
  }


/* Классы*/
p {
  padding: 10px;
}

.nice-box {
  border-radius: 5px;
  box-shadow: 3px 3px 4px #cccccc;
}

<p class="blue nice-box">

/* Приминение нескольких классов. Через пробел. */
.class1 {
  background-color: red;
}

.class2 {
  color: white;
}

<p class="class1 class2">Hi!</p>


/* Когда к одному элементу применяются несколько CSS-правил, то приоритетность этих правил определяется по их селектору. 
Если селекторы однотипные, как в нашем случае, то тогда более приоритетным является CSS-правило, 
которое расположено ниже в коде. */
.blue {
    background-color: #aaddff;
  }
  
  .green {
    background-color: #dff0d8; /* В итоге фон будет зеленый! */
  }

  /* != */

  .green {
    background-color: #dff0d8;
  }

  .blue {
    background-color: #aaddff; /* В итоге фон будет синий! */
  }
 
/* Наследование */
/* 
Другой важный механизм CSS — это наследование. 
Он заключается в том, что часть стилей может передаваться от родительского элемента к дочерним (вложенным в него).
Например, все элементы внутри тега body являются дочерними по отношению к нему. 
Если для body в стилях задать цвет текста красным, то цвет всех остальных элементов тоже станет красным.

Ещё пример: тег ul является родительским по отношению к вложенным в него тегам li. 
Если задать для ul шрифт курсивом, то и внутри всех li шрифт станет курсивным. 

Ненаследуемые свойства
Наследование работает не для всех свойств. 
Некоторые свойства применяются только к самому элементу и не переходят к его потомкам.
К таким ненаследуемым свойствам относятся: ширина, высота, отступы, режим позиционирования и другие. 
Согласитесь, было бы странно задать отступы для body и обнаружить, что у всех вложенных элементов тоже появились отступы.
*/


/*
Responsive design - верстка под мобильные и десктопные версии.
Приминение разного разрешения экрана
Сайт будет подстраиваться под разные экраны
Допустим было 3 картинки по горизонтали
То на маленьком разрешении они будут уже выстраиваться по вертикали
*/
@media screen and(max-width: 640px){  /* Допустим при ширине экрана 640 мы поняли, что уже плохо */
    .offer {
        float: none;
        width: 96%;
    }

 /* Очень популярное свойсто позиционирования - flex! При растягивании браузера
 контент будет подгоняться!  https://flexboxfroggy.com/#ru */
body {
    display: flex
}
#colored {
    background-color: rgb(44, 11, 11)
}

<div id="colored">Hi!</div>


/* Цвет */
/* Прозрачность */
p {
  color: rgba(44, 11, 11, 0.45);  /* Четвертый параметр  - прозрачность! */
}
